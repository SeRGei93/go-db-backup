package internal

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"os/exec"
)

// RestoreDatabaseToContainer –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞–º–ø–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Docker.
func RestoreDatabaseToContainer(dumpFile string) error {
	dbParams, err := InitParamsRestoreDatabaseFromFlags()
	if err != nil {
		return err
	}

	file, err := os.Open(dumpFile)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–∞–º–ø–∞: %v", err)
	}
	defer func(file *os.File) {
		err := file.Close()
		if err != nil {

		}
	}(file)

	fmt.Println("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
	loading := make(chan bool)
	go spinner(loading)

	// –°–æ–∑–¥–∞–µ–º pipe –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
	pipeReader, pipeWriter := io.Pipe()

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ docker exec
	cmd := exec.Command(
		"docker", "exec", "-i", dbParams.Host, "/usr/bin/mysql",
		"-u", dbParams.User, "--password="+dbParams.Password, dbParams.Name,
	)

	// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã gzip –≤ –≤—Ö–æ–¥ mysql
	cmd.Stdin = pipeReader

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	go func() {
		// –ó–∞–∫—Ä—ã–≤–∞–µ–º pipe, –∫–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞
		defer func(pw *io.PipeWriter) {
			err := pw.Close()
			if err != nil {

			}
		}(pipeWriter)

		// –ó–∞–ø—É—Å–∫–∞–µ–º gzip, —á—Ç–æ–±—ã —Ä–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ pipe
		gzipCmd := exec.Command("gzip", "-dc")
		gzipCmd.Stdin = file
		gzipCmd.Stdout = pipeWriter

		// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É gzip
		if err := gzipCmd.Run(); err != nil {
			fmt.Printf("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ –¥–∞–º–ø–∞: %v\n", err)
		}
	}()

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	output, err := cmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–º–ø–∞: %v, output: %s", err, output)
	}

	loading <- true
	fmt.Println("\n‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

	if RemoveFlag == true {
		err = os.Remove(dumpFile) // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –¥–∞–º–ø–∞
		if err != nil {
			return fmt.Errorf("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: %v", err.Error())
		}

		fmt.Printf("üóë –§–∞–π–ª %s —É–¥–∞–ª–µ–Ω", dumpFile)
	}

	return nil
}

// RestoreDatabase –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞–º–ø–∞ –±–∞–∑—É –ø–æ –ø—Ä—è–º–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –∫ –Ω–µ–π.
func RestoreDatabase(dumpFile string) error {
	dbParams, err := InitParamsRestoreDatabaseFromFlags()
	if err != nil {
		return err
	}

	fmt.Println("–ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
	loading := make(chan bool)
	go spinner(loading)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –¥–∞–º–ø–∞
	if _, err := os.Stat(dumpFile); os.IsNotExist(err) {
		return fmt.Errorf("—Ñ–∞–π–ª –¥–∞–º–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", dumpFile)
	}

	restoreCmd := exec.Command(
		"sh",
		"-c",
		fmt.Sprintf("gunzip -c %s | mariadb -h %s -u %s -p%s %s",
			dumpFile, dbParams.Host, dbParams.User, dbParams.Password, dbParams.Name))

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
	var stdout, stderr bytes.Buffer
	restoreCmd.Stdout = &stdout
	restoreCmd.Stderr = &stderr

	if err := restoreCmd.Run(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–º–ø–∞: %s", stderr.String())
	}

	loading <- true
	fmt.Println("–î–∞–º–ø —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", stdout.String())
	return nil
}
