package internal

import (
	"bytes"
	"fmt"
	"github.com/pkg/sftp"
	"github.com/schollz/progressbar/v3"
	"golang.org/x/crypto/ssh"
	"io"
	"os"
	"time"
)

func BackupDatabase(sshClient *ssh.Client, dbParams DatabaseConnectionParams, backupFile string) error {
	fmt.Println("–°–æ–∑–¥–∞—é –¥–∞–º–ø")
	loading := make(chan bool)
	go spinner(loading)

	remoteFile := fmt.Sprintf("/tmp/%s.sql.gz", dbParams.Name)

	cmd := fmt.Sprintf(
		"mysqldump -h %s -u %s --password=\"%s\" %s | gzip > %s",
		dbParams.Host, dbParams.User, dbParams.Password, dbParams.Name, remoteFile,
	)

	// –°–æ–∑–¥–∞–µ–º SSH-—Å–µ—Å—Å–∏—é
	session, err := sshClient.NewSession()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SSH-—Å–µ—Å—Å–∏–∏: %w", err)
	}
	defer func(session *ssh.Session) {
		err := session.Close()
		if err != nil {

		}
	}(session)

	var stderrBuf bytes.Buffer
	session.Stderr = &stderrBuf

	if err := session.Run(cmd); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è mysqldump: %w, stderr: %s", err, stderrBuf.String())
	}

	loading <- true
	return DownloadDumpFile(sshClient, remoteFile, backupFile)
}

func GetBackupFileName(dir string) (string, error) {
	if err := os.MkdirAll(dir, 0755); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: %w", err)
	}
	return fmt.Sprintf("%s/backup_%s.sql.gz", dir, time.Now().Format("20060102_150405")), nil
}

func DownloadDumpFile(sshClient *ssh.Client, remoteFile string, backupFile string) error {
	// –û—Ç–∫—Ä—ã–≤–∞–µ–º SFTP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	sftpClient, err := sftp.NewClient(sshClient)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SFTP-–∫–ª–∏–µ–Ω—Ç–∞: %w", err)
	}
	defer func(sftpClient *sftp.Client) {
		err := sftpClient.Close()
		if err != nil {

		}
	}(sftpClient)

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ (—Ä–∞–∑–º–µ—Ä)
	remoteFileStat, err := sftpClient.Stat(remoteFile)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ: %w", err)
	}
	totalSize := remoteFileStat.Size()

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª
	remoteFileHandle, err := sftpClient.Open(remoteFile)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: %w", err)
	}
	defer func(remoteFileHandle *sftp.File) {
		err := remoteFileHandle.Close()
		if err != nil {

		}
	}(remoteFileHandle)

	// –°–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
	localFile, err := os.Create(backupFile)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: %w", err)
	}
	defer func(localFile *os.File) {
		err := localFile.Close()
		if err != nil {

		}
	}(localFile)

	// –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	bar := progressbar.DefaultBytes(totalSize, "üì• –°–∫–∞—á–∏–≤–∞—é –¥–∞–º–ø...")
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º TeeReader –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	_, err = io.Copy(io.MultiWriter(localFile, bar), remoteFileHandle)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: %w", err)
	}

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
	err = sftpClient.Remove(remoteFile)
	if err != nil {
		fmt.Printf("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª %s: %v\n", remoteFile, err)
	}
	fmt.Println("\n‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:", backupFile)
	return nil
}
